head(datos1)
library(ggplot2)
library(dplyr)
?"$"
hoja <- datos1$hojas
riego <- datos1$Riego
min(hoja)
max(hoja)
mean(hoja) #media de hojas = 2.48
sd(hoja) #desviacion estandar de hojas = 1.12
hist(hoja)
boxplot(hoja)
chisq.test(hoja)
#Independencia del sustrato
table(datos1$hojas, datos1$Sustrato)
prop.table(table(datos1$hojas, datos1$Sustrato))
ggplot(data= datos1, aes(x= hojas, fill= Sustrato)) +
geom_bar()
chisq.test(x= datos1$hojas, y= datos1$Sustrato)
datos <- "~/Proyecto_Estadística1.xlsx"
#H0: var_st == var_sa
#Ha: var_st != var_sa
st <- datos1 %>%
filter(datos1$Sustrato == "T") %>%
select(hojas) %>%
unlist()
sa <- datos1 %>%
filter(datos1$Sustrato == "A") %>%
select(hojas) %>%
unlist()
?var.test
var.test(x = st, y = sa,
ratio = 1,
alternative = "two.sided",
conf.level = .9)
var.test(x = st, y = sa,
ratio = 1,
alternative = "two.sided",
conf.level = .95)
print(prueba_t)
#Prueba de dos medias
prueba_t <- t.test(st, sa, var.equal = TRUE)  # Usar var.equal=TRUE si se asume igualdad de varianzas
print(prueba_t)
library(readxl)
datos <- "~/Datos1.csv"
excel_sheets(datos)
excel_sheets(datos)
datos <- "~/Datos1.csv"
datos1 <- read_excel(datos)
head(datos1)
library(readxl)
datos <- "~/Datos1.csv"
datos1 <- read_excel(datos)
library(readxl)
datos1 <- "~/Datos1.csv"
datos1 <- read_excel(datos)
library(readxl)
datos <- "~/Proyecto_Estadística1.xlsx"
excel_sheets(datos)
library(readxl)
datos <- "~/Proyecto_Estadística1.xlsx"
excel_sheets(datos)
datos1 <- read_excel(datos)
head(datos1)
library(ggplot2)
library(dplyr)
?"$"
hoja <- datos1$hojas
riego <- datos1$Riego
min(hoja)
max(hoja)
mean(hoja) #media de hojas = 2.48
head(datos1)
prop.table(table(datos1$hojas, datos1$Sustrato))
ggplot(data= datos1, aes(x= hojas, fill= Sustrato)) +
geom_bar()
datos <- "~/Proyecto_Estadística1.xlsx"
excel_sheets(datos)
library(readxl)
datos <- "~/Datos1.csv"
excel_sheets(datos)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
library(readr)  # Para leer archivos CSV de forma más eficiente
# Cargar los datos desde un archivo CSV
datos <- "~/Datos1.csv"
datos1 <- read_csv(datos)
# Cargar los datos desde un archivo CSV
datos <- "C:\Users\RUCO HOUSE\OneDrive\Desktop\pipo\espol\s3\esta\Datos1.csv"
library(readxl)
library(readr)  # Para leer archivos CSV de forma más eficiente
# Cargar los datos desde un archivo CSV
datos <- "~/Datos1.csv"
datos1 <- read_csv(datos)
library(readxl)
library(readr)  # Para leer archivos CSV de forma más eficiente
# Cargar los datos desde un archivo CSV
datos <- "~/Datos1.csv"
datos1 <- read_csv(datos)
datos1 <- read_csv(datos)
library(readxl)
library(readr)  # Para leer archivos CSV de forma más eficiente
# Cargar los datos desde un archivo CSV
datos <- "~/Datos1.csv"
datos1 <- read_csv(datos)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
library(ggplot2)
library(dplyr)
?"$"
hoja <- datos1$hojas
riego <- datos1$Riego
Datos1.csv
library(readr)  # Para leer archivos CSV de forma más eficiente
# Cargar los datos desde un archivo CSV
datos <- "C:/Users/RUCO HOUSE/OneDrive/Desktop/pipo/espol/s3/esta/estadisticar/Datos1.csv"
# Leer el archivo CSV
datos1 <- read_csv(datos)
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
library(readr)  # Para leer archivos CSV de forma más eficiente
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
install.packages("here")
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
# Ver las primeras filas de los datos para confirmar que se ha leído correctamente
head(datos1)
library(readxl)
library(readr)  # Para leer archivos CSV de forma más eficiente
install.packages("here")
library(here)
install.packages("here")
library(here)
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
library(readr)  # Para leer archivos CSV de forma más eficiente
library(here)
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
getwd()
library(readxl)
library(ggplot2)
library(dplyr)
library(readr)  # Para leer archivos CSV de forma más eficiente
library(here)
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
getwd()
# Cargar los datos desde un archivo CSV
datos1 <- read_csv("Datos1.csv")
# Cargar los datos desde un archivo CSV
datos1 <- read_csv("~/Datos1.csv")
setwd("C:/Users/RUCO HOUSE/OneDrive/Desktop/pipo/espol/s3/esta/estadisticar")
# Cargar los datos desde un archivo CSV
datos1 <- read_csv("~/Datos1.csv")
# Cargar los datos desde un archivo CSV
datos1 <- read_csv(here("Datos1.csv"))
datos <- "~/Datos1.csv"
excel_sheets(datos)
library(readxl)
dieta <- read.csv("~/datasets/Datos1.csv")
dieta <- read.csv("~/datasets/Datos1.csv")
datos1 <- read_csv("C:/Users/RUCO HOUSE/OneDrive/Desktop/pipo/espol/s3/esta/estadisticar/Datos1.csv")
head(datos1)
library(ggplot2)
library(dplyr)
library(readxl)
datos1 <- read_csv("~/datasets/Datos1.csv")
head(datos1)
library(ggplot2)
datos1 <- read_csv("~/datasets/Datos1.csv")
datos1 <- read_csv("~/Datos1.csv")
library(readxl)
library(readr)
datos1 <- read_csv("~/datasets/Datos1.csv")
datos<- ("~/datasets/")
datos1 <- read_csv("~/datasets/Datos1.csv")
datos<- ("~/datasets/Datos1.csv")
datos1 <- read_csv("~/datasets/Datos1.csv")
datos<- "~/datasets/Datos1.csv"
datos1 <- read_csv("datos")
datos1 <- read_csv("Datos.csv")
datos1 <- read_csv("Datos1.csv")
head(datos1)
datos1 <- read_csv("Datos1.csv")
datos1 <- read_csv(datos)
head(datos1)
datos<- "~/datasets/Datos1.csv"
datos1 <- read_csv(datos)
.csv
datos<- "~/datasets/Datos1.csv"
datos1 <- read_csv("Datos1.csv")
#Binomial para cada grupo
p_teorica <- 0.85
# Extraer los grupos únicos
grupos <- unique(datos1$muestra)
# Extraer los grupos únicos
grupos <- unique(datos1$Muestra)
library(readr)
datos<- "~/datasets/Datos1.csv"
datos1 <- read_csv("Datos1.csv")
head(datos1)
library(ggplot2)
library(dplyr)
?"$"
hoja <- datos1$hojas
riego <- datos1$Riego
min(hoja)
max(hoja)
mean(hoja) #media de hojas = 2.48
library(dplyr)
?"$"
hoja <- datos1$hojas
library(readxl)
library(readr)
library(readr)
datos<- "~/datasets/Datos1.csv"
datos1 <- read_csv("Datos1.csv")
hoja <- datos1$hojas
riego <- datos1$riego
min(hoja)
max(hoja)
mean(hoja) #media de hojas = 2.48
sd(hoja) #desviacion estandar de hojas = 1.12
hist(hoja)
boxplot(hoja)
chisq.test(hoja)
#Independencia del sustrato
table(datos1$hojas, datos1$Sustrato)
sustrato <- datos1$sustrato
#Independencia del sustrato
table(hojas, sustrato)
#Independencia del sustrato
table(hoja, sustrato)
#Independencia del sustrato
table(hoja, sustrato)
prop.table(table(datos1$hojas, datos1$Sustrato))
prop.table(table(hoja, sustrato))
ggplot(data= datos1, aes(x= hojas, fill= Sustrato)) +
geom_bar()
ggplot(data= datos1, aes(x= hoja, fill= sustrato)) +
geom_bar()
ggplot(data= datos1, aes(x= hoja, fill= sustrato)) +
geom_bar()
chisq.test(x= datos1$hojas, y= datos1$Sustrato)
chisq.test(x= hoja, y= sustrato)
#Independecia del riego
table(hoja, riego)
prop.table(table(datos1$hojas, datos1$Riego))
prop.table(table(hoja, riego))
ggplot(data= datos1, aes(x= hojas, fill= Riego)) +
geom_bar()
chisq.test(x= hoja, y= riego)
#H0: var_st == var_sa
#Ha: var_st != var_sa
st <- datos1 %>%
filter(datos1$Sustrato == "T") %>%
select(hojas) %>%
unlist()
#H0: var_st == var_sa
#Ha: var_st != var_sa
st <- datos1 %>%
filter(sustrato == "T") %>%
select(hoja) %>%
unlist()
#H0: var_st == var_sa
#Ha: var_st != var_sa
st <- datos1 %>%
filter(sustrato == "T") %>%
select(hojas) %>%
unlist()
#H0: var_st == var_sa
#Ha: var_st != var_sa
st <- datos1 %>%
filter(sustrato == "T") %>%
select(hojas) %>%
unlist()
sa <- datos1 %>%
filter(sustrato == "A") %>%
select(hojas) %>%
unlist()
?var.test
var.test(x = st, y = sa,
ratio = 1,
alternative = "two.sided",
conf.level = .95)
#Prueba de dos medias
prueba_t <- t.test(st, sa, var.equal = FALSE)
print(prueba_t)
#comprobar binomial
n_total <- 300 * 5  # Total de plantas (300 grupos, 5 plantas por grupo)
x_exitos <- sum(hoja == 3)  # Total de plantas con 3 hojas
# Probabilidad teórica de éxito (aquí debes colocar la probabilidad teórica esperada)
p_teorica <- 0.3  # Ejemplo, reemplaza con la probabilidad teórica real
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = 1330, n = 1500, p = 0.85)
# Resultados de la prueba
print(prueba_binomial)
print(prueba_binomial$p.value)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = 1330, n = 1500, p = 0.3)
# Resultados de la prueba
print(prueba_binomial)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 1500, p = 0.3)
# Resultados de la prueba
print(prueba_binomial)
print(prueba_binomial$p.value)
# Interpretar resultados
if (prueba_binomial$p.value < 0.05) {
cat("Los datos no se ajustan bien a la distribución binomial con la probabilidad teórica.\n")
} else {
cat("Los datos se ajustan bien a la distribución binomial con la probabilidad teórica.\n")
}
#Binomial para cada grupo
p_teorica <- 0.15
# Extraer los grupos únicos
grupos <- unique(datos1$Muestra)
# Extraer los grupos únicos
grupos <- unique(datos1$muestra)
# Crear un data frame para almacenar los resultados
resultados <- data.frame(Muestra = integer(), P_Valor = numeric(), Ajuste = character(), stringsAsFactors = FALSE)
# Realizar la prueba binomial para cada grupo
for (grupo in grupos) {
# Filtrar los datos para el grupo actual
datos_grupo <- datos1 %>% filter(muestra == grupo)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos <- sum(datos_grupo$hojas == 3)
# Número total de plantas en el grupo
n_total <- nrow(datos_grupo)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = n_total, p = p_teorica)
# Almacenar los resultados
resultados <- rbind(resultados, data.frame(Muestra = grupo, P_Valor = prueba_binomial$p.value,
Ajuste = ifelse(prueba_binomial$p.value < 0.05, "No ajusta", "Ajusta"),
stringsAsFactors = FALSE))
}
# Mostrar los resultados
print(resultados)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 1500, p = 0.15)
# Resultados de la prueba
print(prueba_binomial)
# Realizar la prueba binomial para cada grupo
for (grupo in grupos) {
# Filtrar los datos para el grupo actual
datos_grupo <- datos1 %>% filter(muestra == grupo)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos <- sum(datos_grupo$hojas == 3)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 5, p = p_teorica)
# Almacenar los resultados
resultados <- rbind(resultados, data.frame(Muestra = grupo, P_Valor = prueba_binomial$p.value,
Ajuste = ifelse(prueba_binomial$p.value < 0.05, "No ajusta", "Ajusta"),
stringsAsFactors = FALSE))
}
# Mostrar los resultados
print(resultados)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 1500, p = 0.05)
# Resultados de la prueba
print(prueba_binomial)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 1500, p = 0.005)
# Resultados de la prueba
print(prueba_binomial)
prop.table(table(hoja, sustrato))
#Independencia del sustrato
table(hoja, sustrato)
p_teorica <- 0.05  # Ejemplo, ajusta según sea necesario
# Inicializar el dataframe de resultados
resultados <- data.frame(Muestra = integer(), P_Valor = numeric(), Ajuste = character(), stringsAsFactors = FALSE)
# Obtener los valores únicos de "muestra"
grupos <- unique(datos1$muestra)
# Iterar sobre cada grupo
for (grupo in grupos) {
# Filtrar los datos para el grupo actual
datos_grupo <- datos1 %>% filter(muestra == grupo)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos <- sum(datos_grupo$hojas == 3)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 5, p = p_teorica)
# Almacenar los resultados
resultados <- rbind(resultados, data.frame(
Muestra = grupo,
P_Valor = prueba_binomial$p.value,
Ajuste = ifelse(prueba_binomial$p.value < 0.05, "No ajusta", "Ajusta"),
stringsAsFactors = FALSE
))
}
# Mostrar los resultados
print(resultados)
datos_grupo1 <- datos1 %>% filter(muestra == 1)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos <- sum(datos_grupo1$hojas == 3)
prueba_binomial <- binom.test(x = x_exitos1, n = 5, p = p_teorica)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos1 <- sum(datos_grupo1$hojas == 3)
prueba_binomial <- binom.test(x = x_exitos1, n = 5, p = p_teorica)
P_Valor1 = prueba_binomial$p.value
print(P_valor1)
print(P_Valor1)
print(prueba_binomial1)
prueba_binomial1 <- binom.test(x = x_exitos1, n = 5, p = p_teorica)
print(prueba_binomial1)
prueba_binomial1 <- binom.test(x = x_exitos1, n = 5, p = 0.85)
print(prueba_binomial1)
prueba_binomial1 <- binom.test(x = x_exitos1, n = 5, p = 0.3)
print(prueba_binomial1)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 1500, p = 0.3)
# Resultados de la prueba
print(prueba_binomial)
print(prueba_binomial$p.value)
# Interpretar resultados
if (prueba_binomial$p.value < 0.05) {
cat("Los datos no se ajustan bien a la distribución binomial con la probabilidad teórica.\n")
} else {
cat("Los datos se ajustan bien a la distribución binomial con la probabilidad teórica.\n")
}
#comprobar binomial
n_total <- 300 * 5  # Total de plantas (300 grupos, 5 plantas por grupo)
x_exitos <- sum(hoja == 3)  # Total de plantas con 3 hojas
print(x_exitos/n_total)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 1500, p = 0.1)
# Resultados de la prueba
print(prueba_binomial)
p_teorica <- 0.1  # Ejemplo, ajusta según sea necesario
# Inicializar el dataframe de resultados
resultados <- data.frame(Muestra = integer(), P_Valor = numeric(), Ajuste = character(), stringsAsFactors = FALSE)
# Obtener los valores únicos de "muestra"
grupos <- unique(datos1$muestra)
# Iterar sobre cada grupo
for (grupo in grupos) {
# Filtrar los datos para el grupo actual
datos_grupo <- datos1 %>% filter(muestra == grupo)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos <- sum(datos_grupo$hojas == 3)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 5, p = p_teorica)
resultados <- rbind(resultados, data.frame(
Muestra = grupo,
P_Valor = prueba_binomial$p.value,
Ajuste = ifelse(prueba_binomial$p.value < 0.05, "No ajusta", "Ajusta"),
stringsAsFactors = FALSE
))
}
datos_grupo1 <- datos1 %>% filter(muestra == 1)
prueba_binomial1 <- binom.test(x = x_exitos1, n = 5, p = 0.1)
print(prueba_binomial1)
prueba_binomial1 <- binom.test(x = 0, n = 5, p = 0.1)
print(prueba_binomial1)
prueba_binomial1 <- binom.test(x = 0, n = 5, p = 0.85)
print(prueba_binomial1)
prueba_binomial1 <- binom.test(x = 0, n = 5, p = 0.1)
print(prueba_binomial1)
probabilidad_0_exitos <- dbinom(x=0, size = 5, prob = 0.1)
print(probabilidad_0_exitos)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 5, p = 0.1)
resultados <- rbind(resultados, data.frame(
Muestra = grupo,
P_Valor = prueba_binomial$p.value,
Ajuste = ifelse(prueba_binomial$p.value < 0.05, "No ajusta", "Ajusta"),
stringsAsFactors = FALSE
))
# Iterar sobre cada grupo
for (grupo in grupos) {
# Filtrar los datos para el grupo actual
datos_grupo <- datos1 %>% filter(muestra == grupo)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos <- sum(datos_grupo$hojas == 3)
# Realizar la prueba binomial
prueba_binomial <- binom.test(x = x_exitos, n = 5, p = 0.1)
resultados <- rbind(resultados, data.frame(
Muestra = grupo,
P_Valor = prueba_binomial$p.value,
Ajuste = ifelse(prueba_binomial$p.value < 0.05, "No ajusta", "Ajusta"),
stringsAsFactors = FALSE
))
}
datos_grupo1 <- datos1 %>% filter(muestra == 1)
# Contar el número de éxitos (plantas con 3 hojas)
x_exitos1 <- sum(datos_grupo1$hojas == 3)
probabilidad_0_exitos <- dbinom(x=0, size = 5, prob = 0.1)
print(probabilidad_0_exitos)
prueba_binomial1 <- binom.test(x = 0, n = 5, p = 0.1)
print(prueba_binomial1)
P_Valor1 = prueba_binomial$p.value
print(P_Valor1)
# Mostrar los resultados
print(resultados)
